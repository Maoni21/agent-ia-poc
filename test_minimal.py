"""
Test minimal pour identifier le probl√®me OpenAI
"""

import asyncio
import os
import sys
from pathlib import Path

# Ajouter le path
sys.path.insert(0, str(Path(__file__).parent))


async def test_1_openai_import():
    """Test 1: Import OpenAI"""
    print("\n" + "=" * 70)
    print("TEST 1: Import OpenAI")
    print("=" * 70)

    try:
        from openai import AsyncOpenAI
        print("‚úÖ Import AsyncOpenAI r√©ussi")
        return True
    except Exception as e:
        print(f"‚ùå Erreur import: {e}")
        return False


async def test_2_openai_connection():
    """Test 2: Connexion OpenAI"""
    print("\n" + "=" * 70)
    print("TEST 2: Connexion OpenAI")
    print("=" * 70)

    try:
        from openai import AsyncOpenAI
        from config import get_config

        config = get_config()
        api_key = config.openai_api_key

        if not api_key:
            print("‚ùå Pas de cl√© API OpenAI dans la config")
            return False

        print(f"‚úÖ Cl√© API trouv√©e: {api_key[:10]}...{api_key[-4:]}")

        # Cr√©er le client
        client = AsyncOpenAI(api_key=api_key)
        print("‚úÖ Client OpenAI cr√©√©")

        return True

    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_3_simple_openai_call():
    """Test 3: Appel simple OpenAI"""
    print("\n" + "=" * 70)
    print("TEST 3: Appel simple OpenAI")
    print("=" * 70)

    try:
        from openai import AsyncOpenAI
        from config import get_config

        config = get_config()
        api_key = config.openai_api_key

        if not api_key:
            print("‚ùå Pas de cl√© API")
            return False

        client = AsyncOpenAI(api_key=api_key)

        print("üìû Appel de l'API OpenAI...")

        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Tu es un assistant."},
                {"role": "user", "content": "Dis juste 'OK' si tu me re√ßois"}
            ],
            max_tokens=10,
            temperature=0.3
        )

        result = response.choices[0].message.content
        print(f"‚úÖ R√©ponse re√ßue: {result}")

        return True

    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_4_prompt_formatting():
    """Test 4: Formatage du prompt de vuln√©rabilit√©"""
    print("\n" + "=" * 70)
    print("TEST 4: Formatage du prompt")
    print("=" * 70)

    try:
        from config.prompts import format_vulnerability_prompt

        test_data = """
Vuln√©rabilit√©: Test Vulnerability
CVE: CVE-2023-00000
Gravit√©: HIGH
Score CVSS: 7.5
Service: SSH
Ports: 22
Description: Test description
"""

        print("üîß Formatage du prompt...")
        prompt = format_vulnerability_prompt(
            os_info="Ubuntu 20.04",
            services="SSH",
            open_ports="22",
            vulnerabilities_data=test_data
        )

        print(f"‚úÖ Prompt format√©: {len(prompt)} caract√®res")
        print(f"\nExtrait (300 premiers chars):")
        print("-" * 70)
        print(prompt[:300])
        print("-" * 70)

        return True

    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_5_analyzer_init():
    """Test 5: Initialisation de l'Analyzer"""
    print("\n" + "=" * 70)
    print("TEST 5: Initialisation de l'Analyzer")
    print("=" * 70)

    try:
        from src.core.analyzer import Analyzer

        print("üîß Cr√©ation de l'Analyzer...")
        analyzer = Analyzer()

        print(f"‚úÖ Analyzer cr√©√©")
        print(f"   - Provider: {analyzer.current_provider}")
        print(f"   - Ready: {analyzer.is_ready}")
        print(f"   - Model: {analyzer._get_model_name()}")

        return True

    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_6_full_analysis():
    """Test 6: Analyse compl√®te d'une vuln√©rabilit√©"""
    print("\n" + "=" * 70)
    print("TEST 6: Analyse compl√®te")
    print("=" * 70)

    try:
        from src.core.analyzer import Analyzer

        # Donn√©es de test minimales
        test_vulns = [
            {
                "name": "OpenSSH Weak Encryption",
                "cve_id": "CVE-2023-12345",
                "severity": "HIGH",
                "cvss_score": 7.5,
                "affected_service": "SSH",
                "ports": [22],
                "description": "Algorithmes de chiffrement faibles activ√©s"
            }
        ]

        print("üîß Cr√©ation de l'Analyzer...")
        analyzer = Analyzer()

        print("üìû Lancement de l'analyse...")
        print("   (Cela peut prendre 10-30 secondes)")

        result = await analyzer.analyze_vulnerabilities(
            vulnerabilities_data=test_vulns,
            target_system="Ubuntu 20.04 Test System"
        )

        print(f"\n‚úÖ Analyse termin√©e!")
        print(f"   - ID: {result.analysis_id}")
        print(f"   - Vuln√©rabilit√©s analys√©es: {len(result.vulnerabilities)}")
        print(f"   - Temps de traitement: {result.processing_time:.2f}s")
        print(f"   - Score de confiance: {result.confidence_score:.2%}")

        if result.vulnerabilities:
            vuln = result.vulnerabilities[0]
            print(f"\nüìã Premi√®re vuln√©rabilit√©:")
            print(f"   - ID: {vuln.vulnerability_id}")
            print(f"   - Nom: {vuln.name}")
            print(f"   - Priorit√©: {vuln.priority_score}/10")
            print(f"   - Actions: {len(vuln.recommended_actions)} recommandations")

        return True

    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        print(f"Type: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """Fonction principale"""
    print("\nüîç TEST MINIMAL OPENAI - DIAGNOSTIC COMPLET\n")

    tests = [
        ("Import OpenAI", test_1_openai_import),
        ("Connexion OpenAI", test_2_openai_connection),
        ("Appel simple OpenAI", test_3_simple_openai_call),
        ("Formatage prompt", test_4_prompt_formatting),
        ("Initialisation Analyzer", test_5_analyzer_init),
        ("Analyse compl√®te", test_6_full_analysis),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"\nüí• Exception non g√©r√©e dans {test_name}: {e}")
            results.append((test_name, False))

        # Petite pause entre les tests
        await asyncio.sleep(0.5)

    # R√©sum√© final
    print("\n" + "=" * 70)
    print("R√âSUM√â DES TESTS")
    print("=" * 70)

    for i, (test_name, result) in enumerate(results, 1):
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{i}. {test_name}: {status}")

    print("\n" + "=" * 70)

    passed = sum(1 for _, r in results if r)
    total = len(results)

    if passed == total:
        print(f"üéâ SUCC√àS COMPLET! {passed}/{total} tests r√©ussis")
        print("\n‚ú® Votre syst√®me est pr√™t √† analyser les vuln√©rabilit√©s avec OpenAI!")
    else:
        print(f"‚ö†Ô∏è  {passed}/{total} tests r√©ussis")
        print("\nüí° Corrigez les erreurs ci-dessus avant de continuer.")
        print("   Le premier test qui √©choue indique o√π se situe le probl√®me.")

    print("=" * 70 + "\n")


if __name__ == "__main__":
    asyncio.run(main())