"""
Application FastAPI principale pour l'Agent IA de Cybers√©curit√©

Ce module contient la configuration et l'initialisation de l'application FastAPI
qui expose l'API REST pour interagir avec l'agent IA de cybers√©curit√©.
"""

import time
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import JSONResponse
from fastapi.openapi.utils import get_openapi
import uvicorn

from config import get_config, LOG_LEVEL
from src.database.database import Database
from src.utils.logger import setup_logger
from src.core.supervisor import Supervisor
from .config import (
    API_CONFIG,
    MIDDLEWARE_CONFIG,
    APIErrorCodes,
    ERROR_MESSAGES,
    API_TAGS
)
from . import dependencies
from .dependencies import get_database, get_supervisor, get_current_user
from .routes import router

# Configuration du logging
logger = setup_logger(__name__)

# === GESTION DU CYCLE DE VIE DE L'APPLICATION ===

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestionnaire du cycle de vie de l'application FastAPI
    Initialise les ressources au d√©marrage et les nettoie √† l'arr√™t
    """
    # D√©marrage
    logger.info("üöÄ D√©marrage de l'API Agent IA Cybers√©curit√©")

    try:
        # Initialiser la configuration
        config = get_config()
        logger.info(f"Configuration charg√©e: {config.openai_model}")

        # Initialiser la base de donn√©es
        dependencies.database_instance = Database()
        dependencies.database_instance.create_tables()
        logger.info("‚úÖ Base de donn√©es initialis√©e")

        # Initialiser le superviseur
        dependencies.supervisor_instance = Supervisor()
        logger.info("‚úÖ Superviseur initialis√©")

        # V√©rifications de sant√©
        await health_checks()

        logger.info("‚úÖ API d√©marr√©e avec succ√®s")

    except Exception as e:
        logger.error(f"‚ùå Erreur lors du d√©marrage: {e}")
        raise

    # L'application est pr√™te
    yield

    # Arr√™t
    logger.info("üõë Arr√™t de l'API Agent IA Cybers√©curit√©")

    try:
        # Nettoyage des ressources
        if dependencies.supervisor_instance:
            await dependencies.supervisor_instance.shutdown()
            dependencies.supervisor_instance = None
            logger.info("‚úÖ Superviseur arr√™t√©")

        if dependencies.database_instance:
            dependencies.database_instance.close()
            dependencies.database_instance = None
            logger.info("‚úÖ Base de donn√©es ferm√©e")

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'arr√™t: {e}")

    logger.info("‚úÖ Arr√™t termin√©")


# === V√âRIFICATIONS DE SANT√â ===

async def health_checks():
    """V√©rifications de sant√© au d√©marrage"""

    # V√©rifier la base de donn√©es
    try:
        get_database().get_connection()
        logger.info("‚úÖ Connexion base de donn√©es OK")
    except Exception as e:
        logger.error(f"‚ùå Base de donn√©es indisponible: {e}")
        raise

    # V√©rifier la configuration OpenAI
    try:
        config = get_config()
        if not config.openai_api_key:
            logger.warning("‚ö†Ô∏è Cl√© OpenAI non configur√©e")
        else:
            logger.info("‚úÖ Configuration OpenAI OK")
    except Exception as e:
        logger.error(f"‚ùå Configuration invalide: {e}")
        raise


# === CR√âATION DE L'APPLICATION ===

def create_app() -> FastAPI:
    """
    Factory pour cr√©er l'application FastAPI

    Returns:
        FastAPI: Instance de l'application configur√©e
    """

    # Cr√©er l'application FastAPI
    app = FastAPI(
        title=API_CONFIG["title"],
        description=API_CONFIG["description"],
        version=API_CONFIG["version"],
        contact=API_CONFIG["contact"],
        license_info=API_CONFIG["license_info"],
        lifespan=lifespan,
        openapi_tags=API_TAGS,
    )

    # Ajouter les middlewares
    setup_middlewares(app)

    # Ajouter les gestionnaires d'erreur
    setup_error_handlers(app)

    # Ajouter les routes
    app.include_router(router)

    # Configuration OpenAPI personnalis√©e
    setup_openapi(app)

    return app


# === CONFIGURATION DES MIDDLEWARES ===

def setup_middlewares(app: FastAPI):
    """Configure les middlewares de l'application"""

    # CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=MIDDLEWARE_CONFIG["cors"]["allow_origins"],
        allow_credentials=MIDDLEWARE_CONFIG["cors"]["allow_credentials"],
        allow_methods=MIDDLEWARE_CONFIG["cors"]["allow_methods"],
        allow_headers=MIDDLEWARE_CONFIG["cors"]["allow_headers"],
    )

    # Compression
    app.add_middleware(
        GZipMiddleware,
        minimum_size=MIDDLEWARE_CONFIG["compression"]["minimum_size"]
    )

    # Middleware de logging des requ√™tes
    @app.middleware("http")
    async def log_requests(request: Request, call_next):
        """Middleware pour logger les requ√™tes"""
        start_time = time.time()

        # Logger la requ√™te entrante
        logger.info(f"üîÑ {request.method} {request.url.path}")

        # Traiter la requ√™te
        response = await call_next(request)

        # Logger la r√©ponse
        process_time = time.time() - start_time
        logger.info(
            f"‚úÖ {request.method} {request.url.path} "
            f"- {response.status_code} - {process_time:.3f}s"
        )

        return response

    # Middleware de rate limiting (basique)
    @app.middleware("http")
    async def rate_limit_middleware(request: Request, call_next):
        """Middleware basique de rate limiting"""
        # TODO: Impl√©menter un rate limiting plus sophistiqu√©
        # Pour l'instant, on laisse passer toutes les requ√™tes
        response = await call_next(request)
        return response


# === GESTIONNAIRES D'ERREUR ===

def setup_error_handlers(app: FastAPI):
    """Configure les gestionnaires d'erreur personnalis√©s"""

    @app.exception_handler(HTTPException)
    async def http_exception_handler(request: Request, exc: HTTPException):
        """Gestionnaire pour les erreurs HTTP"""
        return JSONResponse(
            status_code=exc.status_code,
            content={
                "error": {
                    "code": exc.status_code,
                    "message": exc.detail,
                    "type": "http_error"
                },
                "success": False,
                "timestamp": time.time()
            }
        )

    @app.exception_handler(Exception)
    async def general_exception_handler(request: Request, exc: Exception):
        """Gestionnaire pour les erreurs g√©n√©rales"""
        logger.error(f"‚ùå Erreur non g√©r√©e: {exc}", exc_info=True)

        return JSONResponse(
            status_code=500,
            content={
                "error": {
                    "code": APIErrorCodes.INTERNAL_ERROR,
                    "message": ERROR_MESSAGES[APIErrorCodes.INTERNAL_ERROR],
                    "type": "internal_error"
                },
                "success": False,
                "timestamp": time.time()
            }
        )

    @app.exception_handler(ValueError)
    async def validation_exception_handler(request: Request, exc: ValueError):
        """Gestionnaire pour les erreurs de validation"""
        return JSONResponse(
            status_code=422,
            content={
                "error": {
                    "code": APIErrorCodes.VALIDATION_ERROR,
                    "message": str(exc),
                    "type": "validation_error"
                },
                "success": False,
                "timestamp": time.time()
            }
        )


# === CONFIGURATION OPENAPI ===

def setup_openapi(app: FastAPI):
    """Configure la documentation OpenAPI personnalis√©e"""

    def custom_openapi():
        if app.openapi_schema:
            return app.openapi_schema

        openapi_schema = get_openapi(
            title=API_CONFIG["title"],
            version=API_CONFIG["version"],
            description=API_CONFIG["description"],
            routes=app.routes,
        )

        # Ajouter des informations suppl√©mentaires
        openapi_schema["info"]["x-logo"] = {
            "url": "/static/logo.png"
        }

        # Ajouter la s√©curit√©
        openapi_schema["components"]["securitySchemes"] = {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }

        app.openapi_schema = openapi_schema
        return app.openapi_schema

    app.openapi = custom_openapi


# === CR√âATION DE L'INSTANCE GLOBALE ===

# Cr√©er l'application
app = create_app()


# === ENDPOINTS DE BASE ===

@app.get("/", tags=["root"])
async def root():
    """Endpoint racine"""
    return {
        "message": "API Agent IA de Cybers√©curit√©",
        "version": API_CONFIG["version"],
        "status": "running",
        "docs": "/docs",
        "redoc": "/redoc"
    }


@app.get("/health", tags=["health"])
async def health_check():
    """Endpoint de v√©rification de sant√©"""
    try:
        # V√©rifier la base de donn√©es
        db = get_database()
        db.get_connection()

        # V√©rifier le superviseur
        supervisor = get_supervisor()

        return {
            "status": "healthy",
            "timestamp": time.time(),
            "version": API_CONFIG["version"],
            "services": {
                "database": "operational",
                "supervisor": "operational",
                "ai_service": "operational"  # TODO: v√©rifier vraiment
            }
        }

    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "timestamp": time.time(),
                "error": str(e)
            }
        )


@app.get("/metrics", tags=["health"])
async def metrics():
    """Endpoint pour les m√©triques de monitoring"""
    try:
        db = get_database()

        # Statistiques basiques
        stats = {
            "total_scans": 0,  # TODO: impl√©menter
            "active_scans": 0,  # TODO: impl√©menter
            "total_vulnerabilities": 0,  # TODO: impl√©menter
            "uptime": time.time(),  # TODO: calculer le vrai uptime
        }

        return {
            "metrics": stats,
            "timestamp": time.time()
        }

    except Exception as e:
        logger.error(f"Metrics collection failed: {e}")
        raise HTTPException(status_code=500, detail="Metrics unavailable")


# === POINT D'ENTR√âE POUR D√âVELOPPEMENT ===

if __name__ == "__main__":
    # Configuration pour le d√©veloppement
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level=LOG_LEVEL.lower(),
        access_log=True
    )