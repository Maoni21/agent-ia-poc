# Docker Compose pour Agent IA de Cybersécurité
# Version: 1.0.0
# Usage: docker-compose up -d

version: '3.8'

services:
  # === SERVICE PRINCIPAL - AGENT IA ===
  vulnerability-agent:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        - PYTHON_VERSION=3.11
    image: vulnerability-agent:latest
    container_name: vuln-agent-main
    restart: unless-stopped

    # Variables d'environnement
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - DATABASE_PATH=/app/data/database/vulnerability_agent.db
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - SCAN_TIMEOUT=300
      - ENABLE_API=true

    # Fichiers de configuration
    env_file:
      - ../.env

    # Volumes persistants
    volumes:
      # Données persistantes
      - vuln_data:/app/data
      - vuln_logs:/app/logs
      # Configuration (lecture seule)
      - ../config:/app/config:ro
      # Socket Docker pour les scans conteneurisés (optionnel)
      - /var/run/docker.sock:/var/run/docker.sock:ro

    # Ports exposés
    ports:
      - "8000:8000"  # API REST
      - "8080:8080"  # Interface Web (optionnel)

    # Réseau
    networks:
      - vuln-network

    # Dépendances
    depends_on:
      - redis-cache
      - postgresql-db

    # Santé du conteneur
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Limites de ressources
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

    # Sécurité
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

    # Commande par défaut
    command: ["python", "main.py", "--api", "--host", "0.0.0.0", "--port", "8000"]

  # === BASE DE DONNÉES POSTGRESQL ===
  postgresql-db:
    image: postgres:15-alpine
    container_name: vuln-agent-db
    restart: unless-stopped

    environment:
      - POSTGRES_DB=vulnerability_agent
      - POSTGRES_USER=vuln_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../src/database/migrations.sql:/docker-entrypoint-initdb.d/init.sql:ro

    ports:
      - "5432:5432"

    networks:
      - vuln-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vuln_user -d vulnerability_agent"]
      interval: 10s
      timeout: 5s
      retries: 5

    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # === CACHE REDIS ===
  redis-cache:
    image: redis:7-alpine
    container_name: vuln-agent-cache
    restart: unless-stopped

    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

    volumes:
      - redis_data:/data

    ports:
      - "6379:6379"

    networks:
      - vuln-network

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # === SCANNER NMAP (Service séparé) ===
  nmap-scanner:
    build:
      context: ..
      dockerfile: docker/Dockerfile.scanner
    image: vulnerability-scanner:latest
    container_name: vuln-agent-scanner
    restart: "no"  # Lance uniquement sur demande

    environment:
      - SCAN_TIMEOUT=600
      - NMAP_ARGS=-sV -sC --script vuln

    volumes:
      - vuln_data:/app/data
      - vuln_logs:/app/logs

    networks:
      - vuln-network
      - scan-network  # Réseau dédié pour les scans

    # Privilèges nécessaires pour Nmap
    cap_add:
      - NET_ADMIN
      - NET_RAW

    profiles:
      - scanning  # Active uniquement avec --profile scanning

  # === MONITORING - PROMETHEUS (Optionnel) ===
  prometheus:
    image: prom/prometheus:latest
    container_name: vuln-agent-monitoring
    restart: unless-stopped

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus

    ports:
      - "9090:9090"

    networks:
      - vuln-network

    profiles:
      - monitoring

  # === INTERFACE WEB - GRAFANA (Optionnel) ===
  grafana:
    image: grafana/grafana:latest
    container_name: vuln-agent-dashboard
    restart: unless-stopped

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false

    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro

    ports:
      - "3000:3000"

    networks:
      - vuln-network

    depends_on:
      - prometheus

    profiles:
      - monitoring

  # === REVERSE PROXY - NGINX (Optionnel) ===
  nginx-proxy:
    image: nginx:alpine
    container_name: vuln-agent-proxy
    restart: unless-stopped

    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro

    ports:
      - "80:80"
      - "443:443"

    networks:
      - vuln-network

    depends_on:
      - vulnerability-agent

    profiles:
      - production

# === VOLUMES PERSISTANTS ===
volumes:
  # Données applicatives
  vuln_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../data

  # Logs
  vuln_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../logs

  # Base de données
  postgres_data:
    driver: local

  # Cache Redis
  redis_data:
    driver: local

  # Monitoring
  prometheus_data:
    driver: local

  grafana_data:
    driver: local

# === RÉSEAUX ===
networks:
  # Réseau principal
  vuln-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

  # Réseau pour les scans (isolé)
  scan-network:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16

# === CONFIGURATION PAR PROFILS ===
# Usage:
# - Production complète: docker-compose --profile production up -d
# - Avec monitoring: docker-compose --profile monitoring up -d
# - Avec scanner: docker-compose --profile scanning up -d
# - Développement: docker-compose up -d (services de base uniquement)